---
import apolloClientPkg from '@apollo/client';
import client from '../../api/graphqlClient';
const { gql } = apolloClientPkg;

const GET_ALL_DATA = gql`
query GetAllData {
allGaleriaObrazow {
nodes {
id
title
galeriaGrupa {
tytul
opis
dostepnosc
kategoria
obraz {
node {
sourceUrl
altText
}
}
}
}
}
}
`;

const { data } = await client.query({ query: GET_ALL_DATA });
const allImages = data.allGaleriaObrazow.nodes;
---

<!-- Sekcja 2 z sliderem -->
<section class="py-12 my-auto">
    <div class="container mx-auto px-4 relative touch-pan-x">
        <h2 class="text-3xl font-bold bg-gold py-0.5 px-1 w-fit mx-auto text-center mb-8">Aktualności:</h2>
        <!-- Kontener dla slidera -->
        <div class="relative overflow-hidden">
            <!-- Strzałki nawigacyjne -->
            <button id="prevButton" class="hidden md:block absolute left-0 top-1/2 z-10 transform -translate-y-1/2 bg-white p-3 rounded-full shadow-lg hover:bg-gray-100 transition-colors">
                &larr;
            </button>
            <button id="nextButton" class="hidden md:block absolute right-0 top-1/2 z-10 transform -translate-y-1/2 bg-white p-3 rounded-full shadow-lg hover:bg-gray-100 transition-colors">
                &rarr;
            </button>

            <!-- Slider -->
            <div id="slider" class="slider flex gap-6 overflow-hidden scroll-smooth snap-x snap-mandatory no-scrollbar">
                {allImages.map((item) => (
                        <div class="flex-none w-[90vw] md:w-1/2 lg:w-1/3 snap-start p-2">
                            <div class="bg-white shadow-lg rounded-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
                                <!-- Obraz -->
                                <img src={item.galeriaGrupa.obraz.node.sourceUrl} alt={item.galeriaGrupa.tytul} class="w-full h-48 object-cover" />
                                <!-- Treść -->
                                <div class="p-6">
                                    <h3 class="text-xl font-semibold mb-2 text-gray-800">{item.galeriaGrupa.tytul}</h3>
                                    <p class="text-gray-600 mb-4">{item.galeriaGrupa.opis}</p>
                                    <span class={`inline-block px-4 py-2 rounded-full font-semibold text-sm ${item.galeriaGrupa.dostepnosc ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}>
{item.galeriaGrupa.dostepnosc ? "Dostępny" : "Niedostępny"}
</span>
                                </div>
                            </div>
                        </div>
                ))}
            </div>

            <!-- Punktory nawigacyjne na mobile -->
            <div id="dotsContainer" class="flex justify-center gap-2 mt-4 md:hidden">
                {allImages.map((_, index) => (
                        <button
                                class="w-3 h-3 rounded-full bg-dark border-2 border-logo-color"
                                data-index={index}
                        ></button>
                ))}
            </div>
        </div>
    </div>
</section>

<style>
    #slider {
        max-width: 100vw;
    }
    .border-logo-color {
        border-color: hsl(46, 60%, 38%);
    }
</style>

<script>
    (() => {
        let currentIndex = 0;
        const slider = document.getElementById('slider');
        const totalItems = slider.children.length;
        let touchStartX = 0;
        let touchEndX = 0;
        let interval;

// Funkcja do przewijania do konkretnego slajdu
        const goToSlide = (index) => {
            currentIndex = index;
            const slideWidth = slider.children[0].offsetWidth;
            slider.scrollTo({
                left: slideWidth * currentIndex,
                behavior: 'smooth'
            });
            updateDots();
        };

// Funkcja do przewijania do następnego slajdu
        const nextSlide = () => {
            currentIndex = (currentIndex + 1) % totalItems;
            goToSlide(currentIndex);
        };

// Funkcja do przewijania do poprzedniego slajdu
        const previousSlide = () => {
            currentIndex = (currentIndex - 1 + totalItems) % totalItems;
            goToSlide(currentIndex);
        };

// Funkcja do aktualizacji wskaźników (kropek)
        const updateDots = () => {
            const dots = document.querySelectorAll('#dotsContainer button');
            dots.forEach((dot, index) => {
                dot.classList.toggle('bg-gray-800', index === currentIndex);
                dot.classList.toggle('bg-white', index !== currentIndex);
            });
        };

// Obsługa dotyku
        slider.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            clearInterval(interval);
        }, { passive: true });

        slider.addEventListener('touchmove', (e) => {
            e.stopPropagation();
            e.preventDefault();
        }, { passive: false });

        slider.addEventListener('touchend', (e) => {
            touchEndX = e.changedTouches[0].clientX;
            const diffX = touchStartX - touchEndX;

            if (Math.abs(diffX) > 50) {
                if (diffX > 0 && currentIndex < totalItems - 1) {
                    goToSlide(currentIndex + 1);
                } else if (diffX < 0 && currentIndex > 0) {
                    goToSlide(currentIndex - 1);
                }
            }
            startAutoSlide();
        }, { passive: true });

// Nasłuchiwanie zmiany przewijania
        let isScrolling;
        slider.addEventListener('scroll', () => {
            window.clearTimeout(isScrolling);
            isScrolling = setTimeout(() => {
                const slideWidth = slider.children[0].offsetWidth;
                currentIndex = Math.round(slider.scrollLeft / slideWidth);
                updateDots();
            }, 150);
        }, { passive: true });

// Automatyczne przewijanie
        const startAutoSlide = () => {
            interval = setInterval(nextSlide, 5000);
        };

        startAutoSlide();

// Zatrzymanie automatycznego przewijania po najechaniu myszką
        slider.addEventListener('mouseenter', () => clearInterval(interval));
        slider.addEventListener('mouseleave', startAutoSlide);

// Obsługa kliknięć w strzałki
        document.getElementById('nextButton')?.addEventListener('click', nextSlide);
        document.getElementById('prevButton')?.addEventListener('click', previousSlide);

// Obsługa kliknięć w punktory
        document.querySelectorAll('#dotsContainer button').forEach((dot) => {
            dot.addEventListener('click', () => {
                clearInterval(interval);
                goToSlide(Number(dot.dataset.index));
                startAutoSlide();
            });
        });

// Inicjalizacja pierwszego stanu kropek
        updateDots();
    })();
</script>